<?xml version="1.0" standalone="yes"?>
<NewDataSet>
  <Python>
    <PythonId>52</PythonId>
    <Content_python>Command Line IMDB Scraper</Content_python>
    <Sourcecode_python>Command Line IMDB Scraper

#Importing the modules

from BeautifulSoup import BeautifulSoup
import sys
import urllib2
import re
import json

#Ask for movie title
title = raw_input("Please enter a movie title: ")

#Ask for which year
year = raw_input("which year? ")

#Search for spaces in the title string
raw_string = re.compile(r' ')

#Replace spaces with a plus sign
searchstring = raw_string.sub('+', title)

#Prints the search string
print searchstring

#The actual query
url = "http://www.imdbapi.com/?t=" + searchstring + "&amp;y="+year
     request = urllib2.Request(url)
     response = json.load(urllib2.urlopen(request))

print json.dumps(response,indent=2)</Sourcecode_python>
    <DateAdd_python>2015-05-06T19:57:35.883+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>51</PythonId>
    <Content_python>SSH Connection with Python</Content_python>
    <Sourcecode_python>SSH Connection with Python
      
    Module documentation
import pxssh
help(pxssh)

Help on module pxssh:

NAME
   pxssh

FILE
   /usr/lib/python2.7/dist-packages/pxssh.py

DESCRIPTION
   This class extends pexpect.spawn to specialize setting up SSH connections.
   This adds methods for login, logout, and expecting the shell prompt.
    
   $Id: pxssh.py 513 2008-02-09 18:26:13Z noah $

CLASSES
   pexpect.ExceptionPexpect(exceptions.Exception)
       ExceptionPxssh
   pexpect.spawn(__builtin__.object)
       pxssh</Sourcecode_python>
    <DateAdd_python>2015-04-15T11:47:33+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>50</PythonId>
    <Content_python>Magic 8-ball</Content_python>
    <Sourcecode_python>Magic 8-ball

     # Import the modules
     import sys
     import random

          ans = True

     while ans:
           question = raw_input("Ask the magic 8 ball a question: (press  
     enter to quit) ")
    
           answers = random.randint(1,8)
    
      if question == "":
           sys.exit()
    
         elif answers == 1:
      print "It is certain"
    
          elif answers == 2:
      print "Outlook good"
    
          elif answers == 3:
      print "You may rely on it"
    
          elif answers == 4:
      print "Ask again later"
    
          elif answers == 5:
      print "Concentrate and ask again"
    
          elif answers == 6:
      print "Reply hazy, try again"
    
           elif answers == 7:
      print "My reply is no"
    
           elif answers == 8:
      print "My sources say no"</Sourcecode_python>
    <DateAdd_python>2015-04-14T21:47:16.56+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>49</PythonId>
    <Content_python>Guessing Game</Content_python>
    <Sourcecode_python>Guessing Game

     import random
         n = random.randint(1, 99)
         guess = int(raw_input("Enter an integer from 1 to 99: "))
         while n != "guess":
     print
        if guess &lt; n:
     print "guess is low"
        guess = int(raw_input("Enter an integer from 1 to 99: "))
        elif guess &gt; n:
     print "guess is high"
        guess = int(raw_input("Enter an integer from 1 to 99: "))
           else:
     print "you guessed it!"
          break
     print</Sourcecode_python>
    <DateAdd_python>2015-04-14T21:40:44+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>48</PythonId>
    <Content_python>Convert HTML to PDF with the PDFcrowd API</Content_python>
    <Sourcecode_python>Convert HTML to PDF with the PDFcrowd API

   import pdfcrowd

    try:
     # create an API client instance

     # Dummy credentials used; to actually run the program, enter your own.
           client = pdfcrowd.Client("user_name", "api_key")
           client.setAuthor('author_name')

   # Dummy credentials used; to actually run the program, enter your own.
         client.setUserPassword('user_password')

    # Convert a web page and store the generated PDF in a file.
        pdf = client.convertURI('http://www.dancingbison.com')
        with open('dancingbison.pdf', 'wb') as output_file:
        output_file.write(pdf)
    
    # Convert a web page and store the generated PDF in a file.
        pdf = client.convertURI('http://jugad2.blogspot.in/p/about-vasudev-ram.html')
        with open('jugad2-about-vasudevram.pdf', 'wb') as output_file:
        output_file.write(pdf)

    # convert an HTML string and save the result to a file
    output_file = open('html.pdf', 'wb')
    html = "My Small HTML File"
    client.convertHtml(html, output_file)
    output_file.close()

    except pdfcrowd.Error, why:
    print 'Failed:', why</Sourcecode_python>
    <DateAdd_python>2015-04-07T21:27:26.07+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>47</PythonId>
    <Content_python>Draw Text To Image</Content_python>
    <Sourcecode_python>Draw Text To Image

   # Draw (Bitmap Font) Text to Image
      from PIL import Image, ImageDraw, ImageFont

   def reverseColor(r, g, b):
    return (255 - r, 255 - g, 255 - b)
   def grayscaleColor(r, g, b):
    a = (r + g + b) / 3
    return (a, a, a)

   text = "Hello World!"
  # textColor = (255, 255, 0) # RGB Yellow
  # textBackgroundColor = (255, 0, 0) # RGB Red
  textX = 400 # text width in pixels
  textY = 100 # text height in pixels
  textTopLeftX = 0
  textTopLeftY = 0

   # create new image
   # imgx = 800 # image width in pixels
   # imgy = 600 # image height in pixels
   # image = Image.new("RGB", (imgx, imgy))

   # load image
   image = Image.open("input.png")
   (imgx, imgy) = image.size$
   # image = image.resize((imgx, imgy), Image.BICUBIC)

   font = ImageFont.load_default() # load default bitmap font
   (width, height) = font.getsize(text)
   textImage = font.getmask(text)
   pixels = image.load()
   for y in range(imgy):
    by = int(height * (y - textTopLeftY) / textY + 0.5)
    if by &gt;= 0 and by &lt; height:
        for x in range(imgx):
            bx = int(width * (x - textTopLeftX) / textX + 0.5)
            if bx &gt;= 0 and bx &lt; width:
                if textImage.getpixel((bx, by)) == 0: # text background
                    # pass # transparent background
                    # pixels[x, y] = textBackgroundColor
                    (r, g, b, a) = pixels[x, y]
                    pixels[x, y] = grayscaleColor(r, g, b)
                else: # text foreground
                    # pixels[x, y] = textColor  
                    (r, g, b, a) = pixels[x, y]
                    pixels[x, y] = reverseColor(r, g, b)

   image.save("output.png", "PNG")</Sourcecode_python>
    <DateAdd_python>2015-04-07T21:25:46.477+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>46</PythonId>
    <Content_python>Convert a Python AST into an XML file</Content_python>
    <Sourcecode_python>Convert a Python AST into an XML file

   import ast, re, sys
     from xml.dom import minidom

   try:
    from xml.etree import cElementTree as etree
   except:

    try:
        from lxml import etree
    except:
        from xml.etree import ElementTree as etree

   def prettify(xml_string):
      reparsed = minidom.parseString(xml_string)
      return reparsed.toprettyxml(indent="  ")

   class ast2xml(ast.NodeVisitor):
      def __init__(self):
        super(ast.NodeVisitor, self).__init__()
        self.path = []
        self.root = etree.Element('ast')
        self.celement = self.root
    def convert(self, tree):
        self.visit(tree)
        return etree.tostring(self.root)
    def generic_visit(self, node):
        node_name = type(node).__name__
        self.path.append(node_name)
        ocelement = self.celement
        self.celement = etree.SubElement(self.celement, node_name)
        for item in node.__dict__:
            if isinstance(getattr(node, item), ast.AST):
                self.generic_visit(getattr(node, item))
            elif isinstance(getattr(node, item), list):
                ocel2 = self.celement
                self.celement = etree.SubElement(self.celement, item)
                [self.generic_visit(childnode) for childnode in getattr(node, item)$ if isinstance(childnode, (ast.AST, list))]
                self.celement = ocel2
            else:$
                self.celement.attrib.update({item: str(getattr(node, item))})
        self.path.pop()
        self.celement = ocelement

    def main(fpath):
      with open(fpath, 'r') as f:
        tree = ast.parse(f.read())
        res = ast2xml().convert(tree)
        print prettify(res)

    if __name__ == '__main__':
    main(sys.argv[1])</Sourcecode_python>
    <DateAdd_python>2015-04-07T21:24:22.307+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>45</PythonId>
    <Content_python>Image Converter</Content_python>
    <Sourcecode_python>Image Converter

   # Image Converter
   # Supported Formats:
   # http://effbot.org/imagingbook/formats.htm

     from PIL import Image
     import sys, os

    if len(sys.argv) != 3:
    print "USAGE:"
    print "[python] ImageConverter.py InputImageFilePath OutputImageFilePath"
    print "Use quotes if file paths/names contain spaces!"
    os._exit(1) # sys.exit()

    InputImageFilePath = sys.argv[1]
    OutputImageFilePath = sys.argv[2]
    imageFormat = ((os.path.splitext(OutputImageFilePath)[1])[1 : ]).upper()

    if imageFormat == "JPG": imageFormat = "JPEG"
    if imageFormat == "TIF": imageFormat = "TIFF"
    image = Image.open(InputImageFilePath)
    image.save(OutputImageFilePath, imageFormat)</Sourcecode_python>
    <DateAdd_python>2015-04-07T21:22:46.04+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>44</PythonId>
    <Content_python>Convert JSON to PDF with Python and xtopdf</Content_python>
    <Sourcecode_python>Convert JSON to PDF with Python and xtopdf

   import sys
   import json
   from PDFWriter import PDFWriter

    def error_exit(message):
      sys.stderr.write(message)
      sys.exit(1)

    def JSONtoPDF(json_data):
    # Get the data values from the JSON string json_data.

    try:
        data = json.loads(json_data)
        pdf_filename = data['pdf_filename']
        font_name = data['font_name']
        font_size = data['font_size']
        header = data['header']
        footer = data['footer']
        lines = data['lines']
    except Exception as e:
        error_exit("Invalid JSON data: {}".format(e.message))
    # Generate the PDF using the data values.
    try:
        with PDFWriter(pdf_filename) as pw:
            pw.setFont(font_name, font_size)
            pw.setHeader(header)
            pw.setFooter(footer)
            for line in lines:
                pw.writeLine(line)

     except IOError as ioe:
     error_exit("IOError while generating PDF file: {}".format(ioe.message))
     except Exception as e:
     error_exit("Error while generating PDF file: {}".format(e.message))

     def testJSONtoPDF():
       fil = open('the-man-in-the-arena.txt')
       lis = fil.readlines()
    data = { \
        'pdf_filename': 'the-man-in-the-arena.pdf', \
        'font_name': 'Courier', \
        'font_size': 12, \
        'header': 'The Man in the Arena', \
  'footer': 'Generated by xtopdf - http://google.com/search?q=xtopdf', \
        'lines': lis \
        }

    json_data = json.dumps(data)
    JSONtoPDF(json_data)
    
     def main():
       testJSONtoPDF() 

   if __name__ == '__main__':
    main()</Sourcecode_python>
    <DateAdd_python>2015-04-07T21:21:53.227+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>43</PythonId>
    <Content_python>Find Duplicate Files</Content_python>
    <Sourcecode_python>Find Duplicate Files

   import sys
   import os
   import glob
   import hashlib

     numArgs = len(sys.argv) # of command-line arguments
     if numArgs &lt; 2 or numArgs &gt; 3:
       print "USAGE:"
       print "[python] FindDuplicateFiles.py FilePath [FilePath2]"
       print "FilePath2 is optional."
       print "If file path(s) have spaces then add quotes around."
       print "File path(s) must include wildcards in the end"
       print "like ...\*.*"
    os._exit(1)

   if numArgs &gt; 1:
      filePath1 = sys.argv[1]
      filePath2 = filePath1
   if numArgs &gt; 2:
      filePath2 = sys.argv[2]

     fileList1 = glob.glob(filePath1)
     fileList2 = glob.glob(filePath2)

   fileSizeList1 = []
     for fn1 in fileList1:
        fileSizeList1.append(os.path.getsize(fn1))

   fileSizeList2 = []
    for fn2 in fileList2:
       fileSizeList2.append(os.path.getsize(fn2))

   # Find groups of files which have same size
    fileSizeGroups = dict()
    for i in range(len(fileList1)):
    if fileSizeList1[i] not in fileSizeGroups:
        fileSizeGroups[fileSizeList1[i]] = [fileList1[i]]
    elif fileList1[i] not in fileSizeGroups[fileSizeList1[i]]:
        fileSizeGroups[fileSizeList1[i]].append(fileList1[i])

    for i in range(len(fileList2)):
    if fileSizeList2[i] not in fileSizeGroups:
        fileSizeGroups[fileSizeList2[i]] = [fileList2[i]]
    elif fileList2[i] not in fileSizeGroups[fileSizeList2[i]]:
        fileSizeGroups[fileSizeList2[i]].append(fileList2[i])
    
   # Find groups of files which have same size and same hash
     fileHashGroups = dict()
   for fileSize in fileSizeGroups.keys():
    if len(fileSizeGroups[fileSize]) &gt; 1:
        for fn in fileSizeGroups[fileSize]:
            fileHash = hashlib.sha256(open(fn, 'rb').read()).hexdigest()
            if fileHash not in fileHashGroups:
                fileHashGroups[fileHash] = [fn]
            elif fn not in fileHashGroups[fileHash]:
                fileHashGroups[fileHash].append(fn)

   # Output groups of files which have same size and same hash
    for fileHash in fileHashGroups.keys():
    if len(fileHashGroups[fileHash]) &gt; 1:
        for fn in fileHashGroups[fileHash]:
            print fn
        print</Sourcecode_python>
    <DateAdd_python>2015-04-07T21:20:07.743+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>42</PythonId>
    <Content_python>Validate product</Content_python>
    <Sourcecode_python>Validate product

import re
       print " Write  product  name  : "
       nume_produs = raw_input()
       print " Write product  price : "
       cost_produs = input()

      if (nume_produs == re.sub('[^a-z]',"",nume_produs)):
         print ('%s %d'%(nume_produs,cost_produs))
     else:
         print "Error ! You  must tape letters"

input()</Sourcecode_python>
    <DateAdd_python>2015-04-07T21:18:15.76+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>41</PythonId>
    <Content_python>Create a unique session key</Content_python>
    <Sourcecode_python>Create a unique session key

def generate_key(self, uid):
    import md5, os, base64, random
    m = md5.new()
    m.update(os.urandom(random.randint(15,25)))
    m.update(uid)
    return base64.standard_b64encode(m.digest())</Sourcecode_python>
    <DateAdd_python>2015-04-07T21:17:38.65+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>40</PythonId>
    <Content_python>Convert doc and docx files to pdf</Content_python>
    <Sourcecode_python>Convert doc and docx files to pdf

from os import chdir, getcwd, listdir, path
from time import strftime
from win32com import client

    def count_files(filetype):
        ''' (str) -&gt; int$
          Returns the number of files given a specified file type.
      &gt;&gt;&gt; count_files(".docx")

    count_files = 0
    for files in listdir(folder):
        if files.endswith(filetype):
            count_files += 1
    return count_files

# Function "check_path" is used to check whether the path the user
provided does
# actually exist. The user is prompted for a path until the existence of 
the
# provided path has been verified.

    def check_path(prompt):
        ''' (str) -&gt; str
    Verifies if the provided absolute path does exist.
       '''
    abs_path = raw_input(prompt)
    while path.exists(abs_path) != True:
        print "\nThe specified path does not exist.\n"
        abs_path = raw_input(prompt)
    return abs_path
    
     print "\n"

     folder = check_path("Provide absolute path for the folder: ")

    # Change the directory.

     chdir(folder)

    # Count the number of docx and doc files in the specified folder.

    num_docx = count_files(".docx")
    num_doc = count_files(".doc")

   # Check if the number of docx or doc files is equal to 0 (= there are 
   no files
   # to convert) and if so stop executing the script. 

    if num_docx + num_doc == 0:
       print "\nThe specified folder does not contain docx or docs files.\n"
       print strftime("%H:%M:%S"), "There are no files to convert. BYE, BYE!."
      exit()
  else:
    print "\nNumber of doc and docx files: ", num_docx + num_doc, "\n"
    print strftime("%H:%M:%S"), "Starting to convert files ...\n"

    # Try to open win32com instance. If unsuccessful return an error message.

try:
    word = client.DispatchEx("Word.Application")
    for files in listdir(getcwd()):
        if files.endswith(".docx"):
            new_name = files.replace(".docx", r".pdf")
            in_file = path.abspath(folder + "\\" + files)
            new_file = path.abspath(folder + "\\" + new_name)
            doc = word.Documents.Open(in_file)
            print strftime("%H:%M:%S"), " docx -&gt; pdf ",$ path.relpath(new_file)
            doc.SaveAs(new_file, FileFormat = 17)
            doc.Close()
        if files.endswith(".doc"):
            new_name = files.replace(".doc", r".pdf")
            in_file = path.abspath(folder + "\\" + files)
            new_file = path.abspath(folder + "\\" + new_name)
            doc = word.Documents.Open(in_file)
  print strftime("%H:%M:%S"), " doc  -&gt; pdf ", path.relpath(new_file)
            doc.SaveAs(new_file, FileFormat = 17)
            doc.Close()
except Exception, e:
    print e
finally:
    word.Quit()

    print "\n", strftime("%H:%M:%S"), "Finished converting files."

   # Count the number of pdf files.

   num_pdf = count_files(".pdf")

   print "\nNumber of pdf files: ", num_pdf

   # Check if the number of docx and doc file is equal to the number of files.

   if num_docx + num_doc == num_pdf:
       print "\nNumber of doc and docx files is equal to number of pdf files."
   else:
        print "\nNumber of doc and docx files is not equal to number of pdf files."</Sourcecode_python>
    <DateAdd_python>2015-04-07T21:16:59.82+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>39</PythonId>
    <Content_python>Search file extensions in directory</Content_python>
    <Sourcecode_python>Search file extensions in directory

import sys
import os

      path = os.path.abspath('.') # default is current dir

         if len(sys.argv) == 2:

      path = sys.argv[1]

    exts = []

       for root, dirs, files in os.walk(os.path.expanduser(path)):

       for fn in files:

        bn, ext = os.path.splitext(fn)
        if not ext in exts:
            exts.append(ext)
            if ext:
                print ext</Sourcecode_python>
    <DateAdd_python>2015-04-07T21:12:29.587+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>38</PythonId>
    <Content_python>Check svn number for all modules</Content_python>
    <Sourcecode_python>Check svn number for all modules

import os
import re
from urllib2 import urlopen

base_url_qacandrot = "https://qacand.sflab.ondemand.com/sf- $version.properties"
base_url_qapatch = "http://qapatch.successfactors.com/sf-$version.properties"
base_url_qacand = "http://qacand.successfactors.com/sf-version.properties"

# get test environment
print "Before use this tool, please make sure you connect to VPN!"
env = raw_input("Please enter your test env: qacand, qacandrot or qapatch$ (Non case sensitive): ")

if env.strip().lower() == "qacand":
    html_resource = urlopen(base_url_qacand).read()
elif env.strip().lower() == "qapatch":
    html_resource = urlopen(base_url_qapatch).read()
elif html_resource == "qacandrot":
    html_resource = urlopen(base_url_qacandrot).read()

module_svn_map = {}

pattern = "(.*?)-(.*?)-(.*?)sion=(\d+$)"
p = re.compile(pattern)

for strofmodule in html_resource.split():
    if re.match(pattern, strofmodule):
        results = re.findall(pattern, strofmodule)
        module = results[0][1]
        svn_number = results[0][3]
        module_svn_map[module] = svn_number
        
build_num_pattern = "com.successfactors.sf-packages.version="
build_num_len = html_resource.index(build_num_pattern) +$ len(build_num_pattern)
build_version = html_resource[build_num_len:]

print "build version is " + build_version, "please make sure it is same 
as that on " + env.strip().lower() + "."

while 1:
    build_by_module = raw_input("Is your module build by module: (y or 
n, Non case sensitive) ")$
$
    if build_by_module.strip().lower() == "n":
        your_module = "V4"$
        your_svn_number = raw_input("Please enter your svn number (6$ digit): ")
        if int(your_svn_number) &lt;= int(module_svn_map[your_module]):
   print "Your svn number is included in current build on " +$ env.strip().lower() + "."
        else:$
            print "Your svn number is NOT included on " +env.strip().lower() +$ "."
        os.system("pause")$    
    elif build_by_module.strip().lower() == "y":
        print "Please make sure your input is exactly same as one of module$ above!"
        your_module = raw_input("Please enter your module name: ")
        your_svn_number = raw_input("Please enter your svn number (6$ digit): ")
        if your_module.strip().lower() in module_svn_map.keys():
            if int(your_svn_number) &lt;= int(module_svn_map[your_module]):
                print "Your svn number is included in current build on " +$ env.strip().lower() + "."
            else:
       print "Your svn number is NOT included on " + env.strip().lower() +$ "."
        os.system("pause")</Sourcecode_python>
    <DateAdd_python>2015-04-07T21:10:54.633+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>37</PythonId>
    <Content_python>Send messages between computers</Content_python>
    <Sourcecode_python>Send messages between computers

   # Save as server.py 
   # Message Receiver
import os
from socket import *
     host = ""
     port = 13000
     buf = 1024
     addr = (host, port)
     UDPSock = socket(AF_INET, SOCK_DGRAM)
     UDPSock.bind(addr)
  print "Waiting to receive messages..."
while True:
    (data, addr) = UDPSock.recvfrom(buf)
    print "Received message: " + data
    if data == "exit":
        break
   UDPSock.close()
     os._exit(0)

   # Save as client.py 
   # Message Sender
import os
from socket import *
     host = "127.0.0.1" # set to IP address of target computer
     port = 13000
     addr = (host, port)
     UDPSock = socket(AF_INET, SOCK_DGRAM)
while True:
    data = raw_input("Enter message to send or type 'exit': ")
    UDPSock.sendto(data, addr)
    if data == "exit":
        break
    UDPSock.close()
      os._exit(0)</Sourcecode_python>
    <DateAdd_python>2015-04-07T21:07:01.867+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>36</PythonId>
    <Content_python>PDFWriter with context manager support</Content_python>
    <Sourcecode_python>PDFWriter with context manager support

from PDFWriter import PDFWriter

with PDFWriter("test_pdfwriter.pdf") as pw:

    pw.setFont("Courier", 12)
    pw.setHeader("Input: test_pdfwriter.py Output: test_pdfwriter.pdf")
    pw.setFooter("Generated by xtopdf: http://bit.ly/xtopdf")

    with open("test_pdfwriter.py") as in_fil:
        for lin in in_fil:
            pw.writeLine(lin)</Sourcecode_python>
    <DateAdd_python>2015-04-07T21:05:57.07+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>35</PythonId>
    <Content_python>List MySql databases in a Gtk</Content_python>
    <Sourcecode_python>List MySql databases in a Gtk

import MySQLdb
import os

class MyWindow(Gtk.Window):
    
    def __init__(self):

        Gtk.Window.__init__(self, title='My Window Title')
        self.connect('delete-event', Gtk.main_quit)    
        
        store = Gtk.ListStore(str, str, str, str)
        self.populate_store(store)
        
        self.treeview = Gtk.TreeView(model=store)

        renderer = Gtk.CellRendererText()
        
        column_catalog = Gtk.TreeViewColumn('Catalog Name', renderer,$ text=0)
        column_catalog.set_sort_column_id(0)    
        self.treeview.append_column(column_catalog)
        
        column_dbname = Gtk.TreeViewColumn('Database Name', renderer,$ $text=1)
        column_dbname.set_sort_column_id(1)
        self.treeview.append_column(column_dbname)
        
        column_charset = Gtk.TreeViewColumn('Character Set', renderer,$ text=2)
        column_charset.set_sort_column_id(2)
        self.treeview.append_column(column_charset)
        
        column_collation = Gtk.TreeViewColumn('Collation', renderer, text=3)
        column_collation.set_sort_column_id(3)
        self.treeview.append_column(column_collation)
        
        scrolled_window = Gtk.ScrolledWindow()
        scrolled_window.set_policy(
            Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
        scrolled_window.add(self.treeview)
        scrolled_window.set_min_content_height(200)

        self.add(scrolled_window)
        self.show_all()

    # Add data to ListStore
    def populate_store(self, store):
        
        try:
            connection = None
            connection = MySQLdb.connect('localhost', 'annon', 'pass')
            cursor = connection.cursor()
 cursor.execute("Select * From `INFORMATION_SCHEMA`.`SCHEMATA`")
            rows = cursor.fetchall()
        
            for row in rows:
                store.append([row[0], row[1], row[2], row[3]])
         
        except MySQLdb.Error, e:
            store.append([str(e.args[0]), e.args[1], '', ''])
  
        finally:
            if connection != None:
                connection.close()
           
win = MyWindow()
Gtk.main()</Sourcecode_python>
    <DateAdd_python>2015-04-07T21:03:30.15+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>34</PythonId>
    <Content_python>Circle Inversion Fractals</Content_python>
    <Sourcecode_python>Circle Inversion Fractals

import math
import random

from PIL import Image

     imgx = 512; imgy = 512
     image = Image.new("RGB", (imgx, imgy))
     pixels = image.load()

     n = random.randint(3, 6) # of main circles
     a = math.pi * 2.0 / n
     r = math.sin(a) / math.sin((math.pi - a) / 2.0) / 2.0 # r of main circles
     h = math.sqrt(1.0 - r * r)
     xa = -h; xb = h; ya = -h; yb = h # viewing area
     cx = [0.0]; cy = [0.0]; cr = [1.0 - r] # center circle

   for i in range(n): # add main circles
     cx.append(math.cos(a * i))
     cy.append(math.sin(a * i))
     cr.append(r)

    maxIt = 100000 # of iterations
     x = -2.0; y = -2.0 # initial point (outside of the circles)

  for i in range(maxIt):
      k = random.randint(0, n) # selected circle for inversion
      dx = x - cx[k]; dy = y - cy[k]
      d = math.hypot(dx, dy)
      dx = dx / d; dy = dy / d
      dnew = cr[k] ** 2.0 / d
      x = dnew * dx + cx[k]
      y = dnew * dy + cy[k]
      kx = int((imgx - 1) * (x - xa) / (xb - xa))
      ky = int((imgy - 1) * (y - ya) / (yb - ya))

    try: pixels[kx, ky] = (255, 255, 255)
    except: pass
    image.save("CircleInversionFractal_" + str(n) + ".png", "PNG")</Sourcecode_python>
    <DateAdd_python>2015-04-07T21:01:08.43+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>33</PythonId>
    <Content_python>Calculating e using Continued Fraction</Content_python>
    <Sourcecode_python>Calculating e using Continued Fraction

import math

     n = 18 # number of iterations
     x = 0.0

  for i in range(n, 0, -1):

    if i % 3 == 1:
        j = int(i / 3) * 2
    else:
        j = 1

    x = 1.0 / (x + j)

     print x + 1, math.e</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:59:55.227+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>32</PythonId>
    <Content_python>Calculating PI using trigonometric iterations</Content_python>
    <Sourcecode_python>Calculating PI using trigonometric iterations

import math

      x = 1.0
      y = 1.0
      z = 1.0
     w = 1.0
     v = 1.0
    u = 1.0

  for i in range(30):

      x = math.sin(x) + x
      y = math.cos(y) + y
      z = math.cos(z) + math.sin(z) + z
      w = math.cos(w) - math.sin(w) + w
      v =  math.cos(v) * math.sin(v) + v
      u =  math.cos(u) / math.sin(u) + u
    
    print i
    print x, y * 2.0, z * 4.0 / 3.0, w * 4.0, v * 2.0, u * 2.0
    print</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:58:53.71+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>31</PythonId>
    <Content_python>Simple but Complex Calculator</Content_python>
    <Sourcecode_python>Simple but Complex Calculator

done = False
while not done:

    import cmath
    import time
    import math
    import Audio_mac

    print "+--------------------------+"
    print "|RAW_CALCULATOR 0.6 (BASIC)|"
    print "|A)Addition                |"
    print "|B)Subtraction             |"
    print "|C)Multiplication          |"
    print "|D)Division                |"
    print "|E)Exponents               |"
    print "|F)Square Root             |"
    print "+--------------------------+"

    usr_choice = raw_input ("&gt;&gt;")
    if usr_choice == "A" or usr_choice == "a":
        print "What is A?"
        a = input ("&gt;&gt;")
        print "What is B?"
        b = input ("&gt;&gt;")
        print "PROCESSING DATA"
        time.sleep(0.8)
        c = a + b
        print c

    if usr_choice == "B" or usr_choice == "b":
        print "What is A?"
        a = input ("&gt;&gt;")
        print "What is B?"
        b = input ("&gt;&gt;")
        print "PROCESSING DATA..."
        time.sleep(0.8)
        c = a - b
        print c

    if usr_choice == "C" or usr_choice == "c":
        print "What is A?"
        a = input ("&gt;&gt;")
        print "What is B?"
        b = input ("&gt;&gt;")
        print "PROCESSING DATA..."
        time.sleep(1.8)
        c = a * b
        print c

    if usr_choice == "D" or usr_choice == "d":
        print "What is A?"
        a = input ("&gt;&gt;")
        print "What is B?"
        b = input ("&gt;&gt;")
        print "PROCESSING DATA..."
        time.sleep(1.8)
        c = a/b
        print c

    if usr_choice == "E" or usr_choice == "e":
        print "What is A?"
        a = input ("&gt;&gt;")
        print "What is B?"
        b = input ("&gt;&gt;")
        print "PROCESSING DATA..."
        time.sleep(1.8)
        c = a**b
        print c

    if usr_choice == "F" or usr_choice == "f":
        print "What is A?"
        a = input ("&gt;&gt;")
        print "PROCESSING DATA..."
        time.sleep(1.8)
        c = math.sqrt(a)
        print c
    if usr_choice == "42":
        print "The answer to the universe life and everything!"
        time.sleep(1.8)
        print "BLOODY FORTY TWO!"
    print ("Try Again? Y/N")

input = raw_input("&gt;&gt;")

    if input == "N" or input == "n":
    done = True</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:56:51.243+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>30</PythonId>
    <Content_python>Publish SQLite data to PDF using named tuples</Content_python>
    <Sourcecode_python>Publish SQLite data to PDF using named tuples

# SQLiteToPDFWithNamedTuples.py
# Author: Vasudev Ram - http://www.dancingbison.com
# SQLiteToPDFWithNamedTuples.py is a program to demonstrate how to$ read 
# SQLite database data and convert it to PDF. It uses the Python
# data structure called namedtuple from the collections module of 
# the Python standard library.

from __future__ import print_function
import sys
from collections import namedtuple
import sqlite3
from PDFWriter import PDFWriter

# Helper function to output a string to both screen and PDF.
def print_and_write(pw, strng):
    print(strng)
    pw.writeLine(strng)

try:

    # Create the stocks database.
    conn = sqlite3.connect('stocks.db')
    # Get a cursor to it.
    curs = conn.cursor()

    # Create the stocks table.
    curs.execute('''DROP TABLE IF EXISTS stocks''')
    curs.execute('''CREATE TABLE stocks
                 (date text, trans text, symbol text, qty real, price real)''')

    # Insert a few rows of data into the stocks table.
curs.execute("INSERT INTO stocks VALUES ('2006-01-05', 'BUY', 'RHAT',$ 100, 25.1)")
curs.execute("INSERT INTO stocks VALUES ('2007-02-06', 'SELL', 'ORCL',$ $200, 35.2)")
curs.execute("INSERT INTO stocks VALUES ('2008-03-07', 'HOLD', 'IBM',$ 300, 45.3)")
    conn.commit()

    # Create a namedtuple to represent stock rows.
    StockRecord = namedtuple('StockRecord', 'date, trans, symbol, qty,$ price')

    # Run the query to get the stocks data.
    curs.execute("SELECT date, trans, symbol, qty, price FROM stocks")

    # Create a PDFWriter and set some of its fields.
    pw = PDFWriter("stocks.pdf")
    pw.setFont("Courier", 12)
    pw.setHeader("SQLite data to PDF with named tuples")
 pw.setFooter("Generated by xtopdf -  $https://bitbucket.org/vasudevram/xtopdf")

    # Write header info.
hdr_flds = [ str(hdr_fld).rjust(10) + " " for hdr_fld in StockRecord._fields ]
    hdr_fld_str = ''.join(hdr_flds)
    print_and_write(pw, '=' * len(hdr_fld_str))
    print_and_write(pw, hdr_fld_str)
    print_and_write(pw, '-' * len(hdr_fld_str))

    # Now loop over the fetched data and write it to PDF.
    # Map the StockRecord namedtuple's _make class method
    # (that creates a new instance) to all the rows fetched.
    for stock in map(StockRecord._make, curs.fetchall()):
        row = [ str(col).rjust(10) + " " for col in (stock.date, \
        stock.trans, stock.symbol, stock.qty, stock.price) ]
        # Above line can instead be written more simply as:
        # row = [ str(col).rjust(10) + " " for col in stock ]
        row_str = ''.join(row)
        print_and_write(pw, row_str)

    print_and_write(pw, '=' * len(hdr_fld_str))

except Exception as e:
    print("ERROR: Caught exception: " + e.message)
    sys.exit(1)

finally:
    pw.close()
    conn.close()</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:54:56.96+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>29</PythonId>
    <Content_python>Check for package updates on PyPI</Content_python>
    <Sourcecode_python>Check for package updates on PyPI

import xmlrpc.client
import pip

pypi = xmlrpc.client.ServerProxy('http://pypi.python.org/pypi')
for dist in pip.get_installed_distributions():
    available = pypi.package_releases(dist.project_name)
    if not available:
        # Try to capitalize pkg name
        available = pypi.package_releases(dist.project_name.capitalize())
     
    if not available:
        msg = 'no releases at pypi'
    elif available[0] != dist.version:
        msg = '{} available'.format(available[0])
    else:
        msg = 'up to date'
    pkg_info = '{dist.project_name} {dist.version}'.format(dist=dist)
    print('{pkg_info:40} {msg}'.format(pkg_info=pkg_info, msg=msg))</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:50:44.727+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>28</PythonId>
    <Content_python>Opening files</Content_python>
    <Sourcecode_python>Opening files

# indent your Python code to put into an email
import glob

# glob supports Unix style pathname extensions
python_files = glob.glob('*.py')
for file_name in sorted(python_files):
    print '    ------' + file_name

    with open(file_name) as f:
        for line in f:
            print '    ' + line.rstrip()

    print</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:49:44.087+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>27</PythonId>
    <Content_python>Prime Factorization</Content_python>
    <Sourcecode_python>Prime Factorization

def primo(n):
    def z(x):
        if x % i : return True
        if x == i: return True
        return False
    nump =[2]+ range(3, n+1, 2) 
    for i in range(3, int((n**0.5)+1),2):
        nump = filter(z, nump)
    return nump

def mcm(n):
    p=primo(n); mm=[]
    while(n &gt; 1):
        for i in p:
            if (n%i == 0): mm.append(i); n=n/i
    mm.sort()
    return mm            

for k in range(100,121):
    print k," ",mcm(k)</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:48:22.85+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>26</PythonId>
    <Content_python>Greatest common divisor</Content_python>
    <Sourcecode_python>Greatest common divisor

def mcd(a,b):
    r=a
    while (r):
        r=a%b; a=b; b=r 
    return a

print mcd(120,95)</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:47:26.913+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>25</PythonId>
    <Content_python>Perfect Square Checker</Content_python>
    <Sourcecode_python>Perfect Square Checker

import math

print("Is your number a perfect square?! Find out now!")
print("Or you can square a number!")

#Setting up while loop with loop-controlled variable
x = 1
while x &gt; 0:

#Get input from user
        op = input("q -&gt; quit program \n" \
                   "c -&gt; checks a number \n" \
                   "s -&gt; squares a number \n")
#Check if input is c, s, or q
        if op[0] is "c":
#If c, take the square root of the number and round it to the largest integer$ value less than or equal to x: math.floor(x)
                num = input("Enter a whole number (q -&gt; quit): ")
                sNum = math.floor(math.sqrt(int(num)))
                numSquared = sNum * sNum
                
#If, else statement to determine if numSquared is equal to the input.
                if numSquared == int(num):
                    print(num, "IS a perfect square! \n"\
                            "√("+ num + ") =", math.sqrt(int(num)))
                else:
                    print(num, "is NOT a perfect square! \n" \
                            "√("+ num + ") =", math.sqrt(int(num)))
#If s, simply square user's input
        if op[0] is "s":
                num = int(input("Enter a number to square (q -&gt; quit): "))
                numSquared = num ** 2
                print(num, "squared is", numSquared)

#If q, quit program with goodbye message
        else:
                if op[0] is 'q':
                        x -= 1
                        print("Goodbye!")
                else:
                        print("Must enter either c, s, or q")</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:46:47.07+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>24</PythonId>
    <Content_python>division digit-by digit calculation</Content_python>
    <Sourcecode_python>division digit-by digit calculation

def div(a,b,t):
      
    a1=str(a)
    if  "." in  a1:
        d1, d2 =a1.split(".")
        d2=d2.ljust(t,"0")
    else:
        d1=a1
        d2="0"*t
           
    c=[];r1=0
    for i in d1:
            d11=int(str(r1)+i)
            c1=d11/b
            r1=d11%b
            c.append(c1);
    
    c.append(".")
    for i in d2:
            d11=int(str(r1)+i)
            c1=d11/b
            r1=d11%b
            c.append(c1);
    
    c = "".join(map(str, c))
    while c[0] =="0": c =c[1:]
    if c[0]==".": c ="0"+c
       
    return c

print div(15,23,150)</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:45:31.117+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>23</PythonId>
    <Content_python>First n primes numbers</Content_python>
    <Sourcecode_python>First n primes numbers

def prime(n):
    def z(x):
        if x :return True
        return False
    num1=range(0,n+1); num2=int(n**0.5) +1
    for k in range(2,num2):
        num0=range(k,n+1,k);del num0[0]
        for i in num0:
            num1[i]=0
    return filter(z, num1)

print prime(102)</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:44:21.65+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>22</PythonId>
    <Content_python>Convert Excel to PDF with xlwings and xtopdf</Content_python>
    <Sourcecode_python>Convert Excel to PDF with xlwings and xtopdf

import sys
from xlwings import Workbook, Sheet, Range, Chart
from PDFWriter import PDFWriter

# Create a connection with a new workbook.
wb = Workbook()

# Create the Excel data.
# Column 1.
Range('A1').value = 'Foo 1'
Range('A2').value = 'Foo 2'
Range('A3').value = 'Foo 3'
# Column 2.
Range('B1').value = 'Bar 1'
Range('B2').value = 'Bar 2'
Range('B3').value = 'Bar 3'

pw = PDFWriter("xlwingsTo.pdf")
pw.setFont("Courier", 10)
pw.setHeader("Testing Excel conversion to PDF with xlwings and xtopdf")
pw.setFooter("xlwings: http://xlwings.org --- xtopdf:$ http://slid.es/vasudevram/xtopdf")

for row in Range('A1..B3').value:
    s = ''
    for col in row:
        s += col + ' | '
    pw.writeLine(s)

pw.close()</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:40:19.353+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>21</PythonId>
    <Content_python>Split a domain with urlparse</Content_python>
    <Sourcecode_python>Split a domain with urlparse

import urlparse

    url = "http://python.org"
    domain = urlparse.urlsplit(url)[1].split(':')[0]
    print "The domain name of the url is: ", domain</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:39:04.103+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>20</PythonId>
    <Content_python>Using Telnet in Python</Content_python>
    <Sourcecode_python>Using Telnet in Python

import getpass
import sys
import telnetlib

HOST = "hostname"

user = raw_input("Enter your remote account: ")

password = getpass.getpass()

tn = telnetlib.Telnet(HOST)

tn.read_until("login: ")

tn.write(user + "\n")

if password:
    tn.read_until("Password: ")
    tn.write(password + "\n")

tn.write("ls\n")

tn.write("exit\n")

print tn.read_all()</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:38:34.133+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>19</PythonId>
    <Content_python>Monitor Apache / Nginx Log File</Content_python>
    <Sourcecode_python>Monitor Apache / Nginx Log File

ips = {}

fh = open("/var/log/nginx/access.log", "r").readlines()
for line in fh:
    ip = line.split(" ")[0]
    if 6 &lt; len(ip) &lt;=15:
        ips[ip] = ips.get(ip, 0) + 1
print ips</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:37:37.947+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>18</PythonId>
    <Content_python>Password Generator</Content_python>
    <Sourcecode_python>Password Generator

import string
from random import *

     characters = string.ascii_letters + string.punctuation  + string.digits
     password =  "".join(choice(characters) for x in range(randint(8, 16)))
     print password</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:26:55.65+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>17</PythonId>
    <Content_python>Apache logfile</Content_python>
    <Sourcecode_python>Apache logfile

import collections

logfile = open("yourlogfile.log", "r")

clean_log=[]

for line in logfile:
    try:
        # copy the URLS to an empty list.
        # We get the part between GET and HTTP
        clean_log.append(line[line.index("GET")+4:line.index("HTTP")])
    except:
        pass

counter = collections.Counter(clean_log)

# get the Top 50 most popular URLs
for count in counter.most_common(50):
    print(str(count[1]) + "\t" + str(count[0]))

logfile.close()</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:26:20.62+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>16</PythonId>
    <Content_python>Log Checker</Content_python>
    <Sourcecode_python>Log Checker

logfile = open("/var/log/syslog", "r")
for line in logfile:
    line_split = line.split()
    print line_split
    list = line_split[0], line_split[1], line_split[2], line_split[4]
    print list</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:25:21.087+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>15</PythonId>
    <Content_python>Guess The Number</Content_python>
    <Sourcecode_python>Guess The Number

# This is a guess the number game.
import random
guessesTaken = 0
print('Hello! What is your name?')
myName = input()
number = random.randint(1, 20)
print('Well, ' + myName + ', I am thinking of a number between 1 and 20.')
while guessesTaken &lt; 6:
    print('Take a guess.') # There are four spaces in front of print.
    guess = input()
    guess = int(guess)
    guessesTaken = guessesTaken + 1
    if guess &lt; number:
        print('Your guess is too low.') # There are eight spaces in front of print.
    if guess &gt; number:
        print('Your guess is too high.')
    if guess == number:
        break
if guess == number:
    guessesTaken = str(guessesTaken)
    print('Good job, ' + myName + '! You guessed my number in ' + guessesTaken + ' guesses!')
if guess != number:
    number = str(number)
    print('Nope. The number I was thinking of was ' + number)</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:24:43.26+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>14</PythonId>
    <Content_python>Get the username from a prompt</Content_python>
    <Sourcecode_python>Get the username from a prompt

#get the username from a prompt

     username = raw_input("Login: &gt;&gt; ")

#list of allowed users

    user1 = "Jack"
    user2 = "Jill"

#control that the user belongs to the list of allowed users

   if username == user1:
       print "Access granted"
   elif username == user2:
       print "Welcome to the system"
   else:
       print "Access denied"</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:23:15.603+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>13</PythonId>
    <Content_python>Get the Geo Location of an IP Address</Content_python>
    <Sourcecode_python>Get the Geo Location of an IP Address

   import re
   import sys
   import urllib2
   import BeautifulSoup

    usage = "Run the script: ./geolocate.py IPAddress"

     if len(sys.argv)!=2:
     print(usage)
     sys.exit(0)

     if len(sys.argv) &gt; 1:
     ipaddr = sys.argv[1]

     geody = "http://www.geody.com/geoip.php?ip=" + ipaddr
    html_page = urllib2.urlopen(geody).read()
    soup = BeautifulSoup.BeautifulSoup(html_page)

  # Filter paragraph containing geolocation info.
     paragraph = soup('p')[3]

   # Remove html tags using regex.
     geo_txt = re.sub(r'&lt;.*?&gt;', '', str(paragraph))
     print geo_txt[32:].strip()</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:22:22.46+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>12</PythonId>
    <Content_python>Backup all MySQL databases, one in each file with a timestamp</Content_python>
    <Sourcecode_python>Backup all MySQL databases, one in each file with a timestamp

#Importing the modules
import os
import ConfigParser
import time

# On Debian, /etc/mysql/debian.cnf contains 'root' a like login and$ password.
config = ConfigParser.ConfigParser()
config.read("/etc/mysql/debian.cnf")
username = config.get('client', 'user')
password = config.get('client', 'password')
hostname = config.get('client', 'host')
filestamp = time.strftime('%Y-%m-%d')

# Get a list of databases with :
database_list_command="mysql -u %s -p%s -h %s --silent -N -e 'show$ databases'" % (username, password, hostname)
for database in os.popen(database_list_command).readlines():
    database = database.strip()
    if database == 'information_schema':
        continue
    if database == 'performance_schema':
        continue
    filename = "/backups/mysql/%s-%s.sql" % (database, filestamp)
 os.popen("mysqldump --single-transaction -u %s -p%s -h %s -d %s | 
gzip -c &gt; %s.gz" % (username, password, hostname, database, filename))</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:21:31.617+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>11</PythonId>
    <Content_python>YouTube API to get data</Content_python>
    <Sourcecode_python>YouTube API to get data

  # Import the modules
    import requests
    import json

  # Make it a bit prettier..
    print "-" * 30
    print "This will show the Most Popular Videos on YouTube"
    print "-" * 30

  # Get the feed r =$ requests.get("http://gdata.youtube.com/feeds/api/standardfeeds/top_rated?     $v=2&amp;alt=jsonc")
     r.text

   # Convert it to a Python dictionary
     data = json.loads(r.text)

  # Loop through the result. 
    for item in data['data']['items']:

    print "Video Title: %s" % (item['title'])

    print "Video Category: %s" % (item['category'])

    print "Video ID: %s" % (item['id'])

    print "Video Rating: %f" % (item['rating'])

    print "Embed URL: %s" % (item['player']['default'])

    print</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:20:08.15+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>10</PythonId>
    <Content_python>Convert KM/H to MPH</Content_python>
    <Sourcecode_python>Convert KM/H to MPH

  #!/usr/bin/env python

    kmh = int(raw_input("Enter km/h: "))
    mph =  0.6214 * kmh

    print "Speed:", kmh, "KM/H = ", mph, "MPH"</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:18:33.51+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>9</PythonId>
    <Content_python>Get all the links from a website</Content_python>
    <Sourcecode_python>Get all the links from a website

   import urllib2
   import re

  #connect to a URL
    website = urllib2.urlopen(url)

  #read html code
    html = website.read()

  #use re.findall to get all the links
    links = re.findall('"((http|ftp)s?://.*?)"', html)

  print links</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:18:08.12+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>8</PythonId>
    <Content_python>Celsius and Fahrenheit Converter</Content_python>
    <Sourcecode_python>Celsius and Fahrenheit Converter

   Fahrenheit to Celsius formula:

    (*F - 32) x 5/9 = *C or in plain english, First subtract 32, then multiply by 5,
    then divide by 9.

   Celsius to Fahrenheit formula:

    (*C x 9/5) + 32 = *F or in plain English, Multiple by 9, then divide by 5, then
    add 32.

   Convert Fahrenheit to Celsius

   #!/usr/bin/env python

   Fahrenheit = int(raw_input("Enter a temperature in Fahrenheit: "))

   Celsius = (Fahrenheit - 32) * 5.0/9.0

   print "Temperature:", Fahrenheit, "Fahrenheit = ", Celsius, " C"
   Convert Celsius to Fahrenheit

   #!/usr/bin/env python

   Celsius = int(raw_input("Enter a temperature in Celsius: "))

   Fahrenheit = 9.0/5.0 * Celsius + 32

   print "Temperature:", Celsius, "Celsius = ", Fahrenheit, " F"</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:17:18.977+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>7</PythonId>
    <Content_python>Calculate the average score</Content_python>
    <Sourcecode_python>Calculate the average score

# Get three test score
round1 = int(raw_input("Enter score for round 1: "))

round2 = int(raw_input("Enter score for round 2: "))

round3 = int(raw_input("Enter score for round 3: "))

# Calculate the average
average = (round1 + round2 + round3) / 3

# Print out the test score
print "the average score is: ", average</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:16:20.15+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>6</PythonId>
    <Content_python>Command Line IMDB Scraper</Content_python>
    <Sourcecode_python>Command Line IMDB Scraper

   #Importing the modules
    from BeautifulSoup import BeautifulSoup
    import sys
    import urllib2
    import re
    import json

   #Ask for movie title
     title = raw_input("Please enter a movie title: ")

   #Ask for which year
     year = raw_input("which year? ")

   #Search for spaces in the title string
     raw_string = re.compile(r' ')

   #Replace spaces with a plus sign
     searchstring = raw_string.sub('+', title)

   #Prints the search string
     print searchstring

   #The actual query
     url = "http://www.imdbapi.com/?t=" + searchstring + "&amp;y="+year

     request = urllib2.Request(url)

     response = json.load(urllib2.urlopen(request))

     print json.dumps(response,indent=2)</Sourcecode_python>
    <DateAdd_python>2015-04-07T20:13:14.85+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>5</PythonId>
    <Content_python>Bitly Shortener</Content_python>
    <Sourcecode_python>Bitly Shortener

# Import the modules

import bitlyapi
import sys

# Define your API information

API_USER = "your_api_username"
API_KEY = "your_api_key"

b = bitlyapi.BitLy(API_USER, API_KEY)

# Define how to use the program

usage = """Usage: python shortener.py [url]
e.g python shortener.py http://www.google.com"""

if len(sys.argv) != 2:
    print usage
    sys.exit(0)

longurl = sys.argv[1]

response = b.shorten(longUrl=longurl)

print response['url']</Sourcecode_python>
    <DateAdd_python>2015-04-06T22:49:11.197+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>4</PythonId>
    <Content_python>Google Command Line Script</Content_python>
    <Sourcecode_python>Google Command Line Script

import urllib2
import urllib
import json

        url = "http://ajax.googleapis.com/ajax/services/search/web?v=1.0&amp;"

       query = raw_input("What do you want to search for ? &gt;&gt; ")

       query = urllib.urlencode( {'q' : query } )

       response = urllib2.urlopen (url + query ).read()

       data = json.loads ( response )

       results = data [ 'responseData' ] [ 'results' ]

       for result in results:
       title = result['title']
       url = result['url']

        print ( title + '; ' + url )</Sourcecode_python>
    <DateAdd_python>2015-04-06T22:48:12.413+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>3</PythonId>
    <Content_python>Port scanner in Python</Content_python>
    <Sourcecode_python>Port scanner in Python

   import socket
   import subprocess
   import sys

   from datetime import datetime

 # Clear the screen
   subprocess.call('clear', shell=True)

 # Ask for input
   remoteServer    = raw_input("Enter a remote host to scan: ")
   remoteServerIP  = socket.gethostbyname(remoteServer)

 # Print a nice banner with information on which host we are about to scan
   print "-" * 60
   print "Please wait, scanning remote host", remoteServerIP
   print "-" * 60

 # Check what time the scan started
   t1 = datetime.now()

 # Using the range function to specify ports (here it will scans all   ports$between 1 and 1024)

 # also put in some error handling for catching errors

  try:
    for port in range(1,1025):  
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex((remoteServerIP, port))
        if result == 0:
            print "Port {}: \t Open".format(port)
        sock.close()

 except KeyboardInterrupt:
    print "You pressed Ctrl+C"
    sys.exit()

 except socket.gaierror:
    print 'Hostname could not be resolved. Exiting'
    sys.exit()

except socket.error:
    print "Couldn't connect to server"
    sys.exit()

 # Checking the time again
   t2 = datetime.now()

 # Calculates the difference of time, to see how long it took to run the script
   total =  t2 - t1

 # Printing the information to screen
 print 'Scanning Completed in: ', total</Sourcecode_python>
    <DateAdd_python>2015-04-06T22:47:24.727+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>2</PythonId>
    <Content_python>Date and Time Script</Content_python>
    <Sourcecode_python>Date and Time Script

   import datetime
   now = datetime.datetime.now()
   print "-" * 25
   print now
   print now.year
   print now.month
   print now.day
   print now.hour
   print now.minute
   print now.second

   print "-" * 25
   print "1 week ago was it: ", now - datetime.timedelta(weeks=1)
   print "100 days ago was: ", now - datetime.timedelta(days=100)
   print "1 week from now is it: ",  now + datetime.timedelta(weeks=1)
   print "In 1000 days from now is it: ", now + datetime.timedelta(days=1000)

   print "-" * 25
   birthday = datetime.datetime(2012,11,04)

   print "Birthday in ... ", birthday - now
   print "-" * 25</Sourcecode_python>
    <DateAdd_python>2015-04-06T22:45:42.65+07:00</DateAdd_python>
  </Python>
  <Python>
    <PythonId>1</PythonId>
    <Content_python>Check your IP Address</Content_python>
    <Sourcecode_python>Check your IP Address

   import urllib
   import re

   print "we will try to open this url, in order to get IP Address"

   url = "http://checkip.dyndns.org"

   print url

   request = urllib.urlopen(url).read()

   theIP = re.findall(r"\d{1,3}\.\d{1,3}\.\d{1,3}.\d{1,3}", request)

   print "your IP Address is: ",  theIP</Sourcecode_python>
    <DateAdd_python>2015-04-06T22:44:30.79+07:00</DateAdd_python>
  </Python>
</NewDataSet>